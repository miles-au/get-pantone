{"version":3,"sources":["components/Header/Header.js","components/FileUpload/FileUpload.js","components/ColorSquare/ColorSquare.js","components/PMSDisplay/PMSDisplay.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","FileUpload","onUpload","picURL","type","onChange","alt","src","ColorSquare","bgColor","percentage","color","pantone","i","key","style","backgroundColor","parseInt","substring","PMSDisplay","colors","loading","squares","entries","push","console","log","app","Clarifai","App","apiKey","event","reader","FileReader","onload","e","setState","target","result","getcolors","substr","search","readAsDataURL","files","file","a","models","predict","response","outputs","data","filtered","map","value","raw_hex","closestPantone","sort","b","reverse","hex","lowestDist","pms","pantones","distance","cd","compare","HTML","PMS","state","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ebb5789.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.scss';\n\nconst Header = () => {\n  return(\n    <header>\n      <h1 className=\"f1 dark-gray tl ph5\">GET PMS</h1>\n      <h3 className=\"f3 dark-gray tl ph5 mt0\">get pantones from product pictures</h3>\n    </header>\n  )\n}\n\nexport default Header","import React from 'react';\n\nconst FileUpload = ({onUpload,picURL}) => {\n  return(\n    <div className=\"fl w-100 w-50-ns pa2\">\n      <div className=\"bg-white pv4 br3\">\n        <h3>Upload a picture of a product</h3>\n        <input type=\"file\" onChange={onUpload} />\n        <img className=\"w-90 mt2\" alt=\"\" src={picURL} />\n      </div>\n    </div>\n  )\n}\n\nexport default FileUpload;","import React from 'react'\nimport './ColorSquare.scss'\n\nconst ColorSquare = ({percentage, color, pantone, i}) =>{\n\n  const foreColor = (bgColor) => {\n    if((  parseInt(\"0x\" + bgColor.substring(1,3)) * 0.299 +\n          parseInt(\"0x\" + bgColor.substring(3,5)) * 0.587 +\n          parseInt(\"0x\" + bgColor.substring(5,7)) * 0.114) > 150){\n\n      return \"#333333\"\n    }else{\n      return \"#ffffff\"\n    }\n  }\n\n  return (\n    <div key={i} className=\"ColorSquare dib\" style={{backgroundColor: color, color: foreColor(color)}}>\n      <p>{percentage}</p>\n      <p>PMS {pantone}</p>\n    </div>\n  )\n}\n\nexport default ColorSquare;","import React from 'react';\nimport ColorSquare from '../ColorSquare/ColorSquare'\n\nconst PMSDisplay = ({colors, picURL, loading}) => {\n  var squares = [];\n  for (const [i, color] of colors.entries()) {\n    squares.push(<ColorSquare percentage={color[0]} color={color[1]} pantone={color[2]} key={i} />);\n  }\n  console.log(\"picURL\", picURL);\n  if(loading === false && picURL === \"\"){\n    squares.push(<p>upload an image</p>);\n  }else if(loading === true){\n    squares.push(<p>loading...</p>);\n  }\n  \n  return(\n    <div className=\"fl w-100 w-50-ns pa2\" >\n      <div className=\"bg-white pv4 br3\">\n        <h3>Pantone colours detected:</h3>\n          {squares}\n      </div>\n    </div>\n  )\n}\n\nexport default PMSDisplay;","import React from 'react';\nimport Header from './components/Header/Header';\nimport FileUpload from './components/FileUpload/FileUpload';\nimport PMSDisplay from './components/PMSDisplay/PMSDisplay';\nimport Clarifai from 'clarifai';\nimport pantones from './pantones.json';\nimport cd from 'color-difference';\nimport './App.scss';\nimport 'tachyons';\n\nconst app = new Clarifai.App({\n  apiKey: '23f21918533f49279e545b219f9598ed'\n});\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      picURL: '',\n      colors: [],\n      loading: false,\n    }\n  }\n\n  onUpload = (event) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      this.setState({picURL: e.target.result, loading: true});\n      this.getcolors(reader.result.substr(reader.result.search('base64,') + 7));\n    }\n    reader.readAsDataURL(event.target.files[0]);\n  }\n\n  getcolors = async(file) => {\n    try {\n      const response = await app.models.predict(\"eeed0b6733a644cea07cf4c60f87ebb7\", file);\n      const colors = await response.outputs[0].data.colors;\n      console.log(\"response\", response);\n      const filtered = colors.map( (value) => [value.value, value.raw_hex, this.closestPantone(value.raw_hex)] );\n      filtered.sort( function(a, b) {\n        return (a[0] - b[0]) || (a[1] - b[1]);\n      }).reverse();\n      this.setState({colors: filtered, loading: false});\n    } catch(err){\n      console.log(\"error: \", err);\n    };\n  }\n\n  closestPantone = (hex) =>{\n    let lowestDist = 100;\n    let pms = \"100\"\n    for (let key of pantones) {\n      let distance = cd.compare(key.HTML, hex);\n      if(distance < lowestDist){\n        lowestDist = distance;\n        pms = key.PMS;\n      }\n    }\n    return pms\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Header />\n        <section className=\"bg-near-white br4 mw8 center pv4\">\n        <div className=\"mw-100 center ph3-ns\">\n          <div className=\"cf ph2-ns\">\n            <FileUpload onUpload={this.onUpload} picURL={this.state.picURL} />\n            <PMSDisplay colors={this.state.colors} picURL={this.state.picURL} loading={this.state.loading} />\n          </div>\n        </div> \n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}